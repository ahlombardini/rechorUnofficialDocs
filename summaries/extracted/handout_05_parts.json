{
  "intro": {
    "title": "Horaire aplati (II)",
    "subtitle": "ReCHor – étape 5",
    "content": "<div class=\"outline-text-2\" id=\"text-1\">\n<p>\nLe but de cette étape est de continuer la rédaction les classes permettant de manipuler l'horaire aplati, en écrivant celles gérant les lignes, les courses, les liaisons et les changements.\n</p>\n</div>"
  },
  "concepts": {
    "header": "2.1. Lignes",
    "subsections": [
      {
        "header": "2.1. Lignes",
        "content": "<div class=\"outline-text-3\" id=\"text-sec/routes\">\n<p>\nPour mémoire, une ligne est un itinéraire le long duquel des véhicules de transport public se déplacent régulièrement. Un exemple est la ligne de métro m1 reliant la gare de Renens à celle du Flon.\n</p>\n<p>\nLes deux seules caractéristiques des lignes qui nous intéressent pour ce projet sont leur nom et le type de véhicule qui les dessert. La structure des lignes aplaties est donc particulièrement simple :\n</p>\n<table>\n<colgroup>\n<col class=\"org-right\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n</colgroup>\n<thead>\n<tr>\n<th class=\"org-right\" scope=\"col\"><code>I</code></th>\n<th class=\"org-left\" scope=\"col\">Champ</th>\n<th class=\"org-left\" scope=\"col\">Type</th>\n<th class=\"org-left\" scope=\"col\">Contenu</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-right\">0</td>\n<td class=\"org-left\"><code>NAME_ID</code></td>\n<td class=\"org-left\"><code>U16</code></td>\n<td class=\"org-left\">Index de chaîne du nom de la ligne</td>\n</tr>\n<tr>\n<td class=\"org-right\">1</td>\n<td class=\"org-left\"><code>KIND</code></td>\n<td class=\"org-left\"><code>U8</code></td>\n<td class=\"org-left\">Type de véhicule desservant la ligne</td>\n</tr>\n</tbody>\n</table>\n<p>\nLe type du véhicule est représenté comme un entier compris entre 0 (inclus) et 6 (inclus) qui correspond directement au type énuméré <code>Vehicle</code> défini à <a href=\"01.html\">l'étape 1</a> — 0 correspond à <code>TRAM</code>, 1 à <code>METRO</code>, etc.\n</p>\n</div>"
      },
      {
        "header": "2.2. Courses",
        "content": "<div class=\"outline-text-3\" id=\"text-sec/trips\">\n<p>\nPour mémoire, une course est un trajet effectué par un véhicule de transport public entre les deux extrémités d'une ligne, dans l'un des deux sens possibles.\n</p>\n<p>\nLes deux seules caractéristiques des courses qui nous intéressent pour ce projet sont leur ligne et le nom de leur destination finale. La structure des courses aplaties est donc également simple :\n</p>\n<table>\n<colgroup>\n<col class=\"org-right\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n</colgroup>\n<thead>\n<tr>\n<th class=\"org-right\" scope=\"col\"><code>I</code></th>\n<th class=\"org-left\" scope=\"col\">Champ</th>\n<th class=\"org-left\" scope=\"col\">Type</th>\n<th class=\"org-left\" scope=\"col\">Contenu</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-right\">0</td>\n<td class=\"org-left\"><code>ROUTE_ID</code></td>\n<td class=\"org-left\"><code>U16</code></td>\n<td class=\"org-left\">Index de la ligne de la course</td>\n</tr>\n<tr>\n<td class=\"org-right\">1</td>\n<td class=\"org-left\"><code>DESTINATION_ID</code></td>\n<td class=\"org-left\"><code>U16</code></td>\n<td class=\"org-left\">Index de chaîne de la destination finale</td>\n</tr>\n</tbody>\n</table>\n<p>\n<code>ROUTE_ID</code> est un index de ligne, donc il fait référence à un élément de la table des lignes dont la structure a été décrite à la section précédente. Sachant que dans les données horaires que nous utiliserons il y a un peu moins de 8 000 lignes, le type <code>U16</code> convient bien pour représenter un tel index.\n</p>\n</div>"
      },
      {
        "header": "2.3. Liaisons",
        "content": "<div class=\"outline-text-3\" id=\"text-sec/connections\">\n<p>\nPour mémoire, une liaison est un trajet effectué par un véhicule de transport public, dans le cadre d'une course, entre deux arrêts successifs — donc sans arrêt intermédiaire. Dans les données aplaties, les liaisons ont la structure suivante :\n</p>\n<table>\n<colgroup>\n<col class=\"org-right\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n</colgroup>\n<thead>\n<tr>\n<th class=\"org-right\" scope=\"col\"><code>I</code></th>\n<th class=\"org-left\" scope=\"col\">Champ</th>\n<th class=\"org-left\" scope=\"col\">Type</th>\n<th class=\"org-left\" scope=\"col\">Contenu</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-right\">0</td>\n<td class=\"org-left\"><code>DEP_STOP_ID</code></td>\n<td class=\"org-left\"><code>U16</code></td>\n<td class=\"org-left\">Index de l'arrêt de départ</td>\n</tr>\n<tr>\n<td class=\"org-right\">1</td>\n<td class=\"org-left\"><code>DEP_MINUTES</code></td>\n<td class=\"org-left\"><code>U16</code></td>\n<td class=\"org-left\">Heure de départ, en minutes après minuit</td>\n</tr>\n<tr>\n<td class=\"org-right\">2</td>\n<td class=\"org-left\"><code>ARR_STOP_ID</code></td>\n<td class=\"org-left\"><code>U16</code></td>\n<td class=\"org-left\">Index de l'arrêt d'arrivée</td>\n</tr>\n<tr>\n<td class=\"org-right\">3</td>\n<td class=\"org-left\"><code>ARR_MINUTES</code></td>\n<td class=\"org-left\"><code>U16</code></td>\n<td class=\"org-left\">Heure d'arrivée, en minutes après minuit</td>\n</tr>\n<tr>\n<td class=\"org-right\">4</td>\n<td class=\"org-left\"><code>TRIP_POS_ID</code></td>\n<td class=\"org-left\"><code>S32</code></td>\n<td class=\"org-left\">Index de la course et position en son sein</td>\n</tr>\n</tbody>\n</table>\n<p>\nLes champs <code>DEP_STOP_ID</code> et <code>ARR_STOP_ID</code> sont des index d'arrêts, qui pour mémoire peuvent soit référencer une gare, soit une voie/quai. Les données horaires que nous utiliserons comportant un peu plus de 54 000 arrêts au total — environ 33 000 gares et 21 000 voies/quai — le type <code>U16</code> convient bien pour les indexer.\n</p>\n<p>\nLes champs <code>DEP_MINUTES</code> et <code>ARR_MINUTES</code> contiennent les heures de départ et d'arrivée de la liaison, exprimées en minutes après minuit. Ces minutes sont <i>forcément</i> positives ou nulles dans les données horaires, donc le type <code>U16</code> convient bien pour les représenter. Comme nous le verrons plus tard, le fait que des heures négatives puissent apparaître, et doivent donc être stockées dans les critères d'optimisation, est dû aux trajets à pied (changements).\n</p>\n<p>\nLe champ <code>TRIP_POS_ID</code> contient une valeur empaquetée dont les 24 bits de poids fort sont l'index dans la table des courses de celle à laquelle la liaison appartient, et les 8 bits de poids faible sont la position de la liaison dans la course en question, à partir de 0. Sachant qu'il y a un peu moins de 3 millions de courses par jour, et que la plus longue course de Suisse comporte 78 liaisons, l'empaquetage utilisé convient tout à fait.\n</p>\n<p>\nLa table des liaisons aplaties est ordonnée, dans le sens où les liaisons y apparaissent ordonnées par heure de départ décroissante. Donc la première liaison, d'index 0, est celle partant le plus tard de toutes. Cet ordre est utilisé par l'algorithme de calcul de voyages optimaux, comme nous le verrons.\n</p>\n</div>"
      },
      {
        "header": "2.4. Liaison suivante",
        "content": "<div class=\"outline-text-3\" id=\"text-sec/connections-succ\">\n<p>\nEn examinant la structure des liaisons aplaties présentée à la section précédente, on constate qu'une information qu'il n'est pas évident d'en extraire est la liaison qui suit une liaison donnée dans une course. Or l'interface <code>Connections</code> possède justement une méthode permettant d'obtenir la liaison suivant une liaison donnée.\n</p>\n<p>\nEn théorie, cette information pourrait être déterminée à partir des liaisons aplaties, puisque chacune d'entre elles contient l'index de la course à laquelle elle appartient, ainsi que sa propre position dans cette course. Dès lors, pour déterminer la liaison suivant une liaison donnée, on pourrait chercher, parmi toutes les liaisons, celle ayant le même index de course mais la position suivante — qui existe pour toutes les liaisons sauf la dernière d'une course.\n</p>\n<p>\nBien que cela soit possible, procéder à une telle recherche serait coûteux sachant qu'il y a, pour un jour donné, entre 2 et 3 millions de liaisons. Il semble dès lors plus judicieux de pré-calculer, pour chaque liaison, l'index de celle qui la suit dans la course, et de stocker cette information dans les données aplaties.\n</p>\n<p>\nC'est donc ce que nous ferons dans ce projet, mais plutôt que de stocker cette information directement dans la table des liaisons, nous utiliserons une table auxiliaire, ne contenant rien d'autre que cette information. Ce choix a été fait afin que la table des liaisons — décrite à la section précédente — ne contienne <i>que</i> les informations nécessaires à l'algorithme de calcul des voyages optimaux, et la liaison suivant une autre n'en fait pas partie. Cette séparation en deux tables permet à celle des liaisons d'être aussi petite que possible, ce qui accélère la recherche de voyages optimaux.\n</p>\n<p>\nLa structure de la table auxiliaire contenant, pour chaque liaison, l'index de la suivante dans la course est donc extrêmement simple :\n</p>\n<table>\n<colgroup>\n<col class=\"org-right\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n</colgroup>\n<thead>\n<tr>\n<th class=\"org-right\" scope=\"col\"><code>I</code></th>\n<th class=\"org-left\" scope=\"col\">Champ</th>\n<th class=\"org-left\" scope=\"col\">Type</th>\n<th class=\"org-left\" scope=\"col\">Contenu</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-right\">0</td>\n<td class=\"org-left\"><code>NEXT_CONNECTION_ID</code></td>\n<td class=\"org-left\"><code>S32</code></td>\n<td class=\"org-left\">Index de la liaison suivante / première</td>\n</tr>\n</tbody>\n</table>\n<p>\nIl faut noter que, comme la dernière liaison d'une course n'a pas de liaison suivante, cette table associe la <i>première</i> liaison d'une course à la dernière. En d'autres termes, les liaisons sont liées entre elles de manière circulaire.\n</p>\n</div>"
      },
      {
        "header": "2.5. Changements",
        "content": "<div class=\"outline-text-3\" id=\"text-sec/transfers\">\n<p>\nPour mémoire, un changement est un trajet à pied qui peut être effectué soit entre deux gares voisines, soit au sein d'une même gare. Dans les données aplaties, les changements ont la structure suivante :\n</p>\n<table>\n<colgroup>\n<col class=\"org-right\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n<col class=\"org-left\"/>\n</colgroup>\n<thead>\n<tr>\n<th class=\"org-right\" scope=\"col\"><code>I</code></th>\n<th class=\"org-left\" scope=\"col\">Champ</th>\n<th class=\"org-left\" scope=\"col\">Type</th>\n<th class=\"org-left\" scope=\"col\">Contenu</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td class=\"org-right\">0</td>\n<td class=\"org-left\"><code>DEP_STATION_ID</code></td>\n<td class=\"org-left\"><code>U16</code></td>\n<td class=\"org-left\">Index de la gare de départ</td>\n</tr>\n<tr>\n<td class=\"org-right\">1</td>\n<td class=\"org-left\"><code>ARR_STATION_ID</code></td>\n<td class=\"org-left\"><code>U16</code></td>\n<td class=\"org-left\">Index de la gare d'arrivée</td>\n</tr>\n<tr>\n<td class=\"org-right\">2</td>\n<td class=\"org-left\"><code>TRANSFER_MINUTES</code></td>\n<td class=\"org-left\"><code>U8</code></td>\n<td class=\"org-left\">Durée du changement, en minutes</td>\n</tr>\n</tbody>\n</table>\n<p>\nLes champs <code>DEP_STATION_ID</code> et <code>ARR_STATION_ID</code> sont des index de <i>gares</i> (et jamais de voie/quai), car dans les données horaires à notre disposition, seuls les changements entre gares — ou au sein d'une seule gare — existent.\n</p>\n<p>\nLe plus long changement dans les données horaires à notre disposition fait 99 minutes — une valeur au demeurant suspecte, qui indique probablement un problème — donc le type <code>U8</code> convient bien à la représentation de la durée du changement.\n</p>\n<p>\nLa table des changements aplatis est ordonnée de manière à ce que tous les changements arrivant à la même gare y soient consécutifs. Cette propriété permet de représenter l'ensemble des changements arrivant à une gare donnée au moyen de l'intervalle des index des changements qui y arrivent.\n</p>\n</div>"
      }
    ]
  },
  "implementation": {
    "header": "3.1. Classe BufferedRoutes",
    "classes": [
      {
        "name": "BufferedRoutes",
        "header": "3.1. Classe BufferedRoutes",
        "content": "<div class=\"outline-text-3\" id=\"text-3-1\">\n<p>\nLa classe <code>BufferedRoutes</code> du sous-paquetage <code>timetable.mapped</code>, publique et finale, implémente l'interface <code>Routes</code> et permet d'accéder à une table de lignes représentée de manière aplatie comme décrit à la §<a href=\"#sec/routes\">2.1</a>. Elle possède un unique constructeur public :\n</p>\n<dl class=\"org-dl\">\n<dt><code>BufferedRoutes(List&lt;String&gt; stringTable, ByteBuffer buffer)</code></dt><dd>qui construit une instance donnant accès aux données aplaties disponibles dans le tableau <code>buffer</code>, en utilisant la table de chaînes <code>stringTable</code> pour déterminer la valeur des chaînes référencées par ces données.</dd>\n</dl>\n<p>\nLes seules méthodes publiques offertes par cette classe sont les versions concrètes des méthodes abstraites de <code>Routes</code>.\n</p>\n</div>"
      },
      {
        "name": "BufferedTrips",
        "header": "3.2. Classe BufferedTrips",
        "content": "<div class=\"outline-text-3\" id=\"text-3-2\">\n<p>\nLa classe <code>BufferedTrips</code> du sous-paquetage <code>timetable.mapped</code>, publique et finale, implémente l'interface <code>Trips</code> et permet d'accéder à une table de courses représentée de manière aplatie comme décrit à la §<a href=\"#sec/trips\">2.2</a>. Elle possède un unique constructeur public :\n</p>\n<dl class=\"org-dl\">\n<dt><code>BufferedTrips(List&lt;String&gt; stringTable, ByteBuffer buffer)</code></dt><dd>qui construit une instance donnant accès aux données aplaties disponibles dans le tableau <code>buffer</code>, en utilisant la table de chaînes <code>stringTable</code> pour déterminer la valeur des chaînes référencées par ces données.</dd>\n</dl>\n<p>\nLes seules méthodes publiques offertes par cette classe sont les versions concrètes des méthodes abstraites de <code>Trips</code>.\n</p>\n</div>"
      },
      {
        "name": "BufferedConnections",
        "header": "3.3. Classe BufferedConnections",
        "content": "<div class=\"outline-text-3\" id=\"text-3-3\">\n<p>\nLa classe <code>BufferedConnections</code> du sous-paquetage <code>timetable.mapped</code>, publique et finale, implémente l'interface <code>Connections</code> et permet d'accéder à une table de liaisons représentée de manière aplatie comme décrit aux §<a href=\"#sec/connections\">2.3</a> et <a href=\"#sec/connections-succ\">2.4</a>. Elle possède un unique constructeur public :\n</p>\n<dl class=\"org-dl\">\n<dt><code>BufferedConnections(ByteBuffer buffer, ByteBuffer succBuffer)</code></dt><dd>qui construit une instance donnant accès aux données aplaties réparties entre le tableau <code>buffer</code>, qui contient les liaisons aplaties (§<a href=\"#sec/connections\">2.3</a>), et le tableau <code>succBuffer</code>, qui contient les liaisons suivantes (§<a href=\"#sec/connections-succ\">2.4</a>).</dd>\n</dl>\n<p>\nLes seules méthodes publiques offertes par cette classe sont les versions concrètes des méthodes abstraites de <code>Connections</code>.\n</p>\n</div>"
      },
      {
        "name": "BufferedTransfers",
        "header": "3.4. Classe BufferedTransfers",
        "content": "<div class=\"outline-text-3\" id=\"text-3-4\">\n<p>\nLa classe <code>BufferedTransfers</code> du sous-paquetage <code>timetable.mapped</code>, publique et finale, implémente l'interface <code>Transfers</code> et permet d'accéder à une table de changements représentée de manière aplatie comme décrit à la §<a href=\"#sec/transfers\">2.5</a>. Elle possède un unique constructeur public :\n</p>\n<dl class=\"org-dl\">\n<dt><code>BufferedTransfers(ByteBuffer buffer)</code></dt><dd>qui construit une instance donnant accès aux données aplaties disponibles dans le tableau <code>buffer</code>.</dd>\n</dl>\n<p>\nLes seules méthodes publiques offertes par cette classe sont les versions concrètes des méthodes abstraites de <code>Transfers</code>.\n</p>\n</div>"
      }
    ],
    "other_subsections": [
      {
        "header": "3.5. Tests",
        "content": "<div class=\"outline-text-3\" id=\"text-3-5\">\n<p>\nComme d'habitude, nous ne vous fournissons plus de tests mais <a href=\"f/SignatureChecks_5.java\">un fichier de vérification de signatures</a> à importer dans votre projet.\n</p>\n</div>"
      }
    ]
  }
}